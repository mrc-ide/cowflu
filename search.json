[{"path":"https://mrc-ide.github.io/cowflu/articles/cowflu.html","id":"setting-model-parameters","dir":"Articles","previous_headings":"","what":"Setting model parameters","title":"Toy Example","text":"First, set model parameters: alpha, beta, gamma, sigma epidemiological parameters. n_herds_per_region vector listing number herds region. p_region_export vector listing probability , day, herd within respective region export cattle another herd. yet inform herd go, whether export going happen. p_cow_export vector listing probability , given herd exporting cattle, probability cow herd included export. .e. toy example states herd exporting cattle, 20% herd exported average, every region. n_cows_per_herd vector listing exactly many cows herd model. movement_matrix details probability region exported herd sent . Element (, j) probability export region sent region j. Thus, row sum 1. time_test time point (days) cattle start tested flu. point, herd exported one region another, number cows (see x ) sampled exported cows. sampled cows Infected compartment, export cancelled. start_herd herd infected cows seeded model initialisation. start_count number infected cows seeded herd start_herd model initialisation. model parameters : n_test number cows tested inter-region exports time_test onwards. defaults 30.","code":"pars <- cowflu:::cowflu_inputs(   alpha = 0.2, #The rate of herd-to-herd infection contacts within each region.   beta = 0.9,  #The transmission rate   gamma = 0.7, #The incubation rate   sigma = 0.9,  #The recovery rate   asc_rate = 1, # The ascertainment rate   dispersion = 1, # Dispersion parameter, when fitting   inputs = cowflu:::cowflu_fixed_inputs(     n_herds_per_region = c(3, 7, 11),     p_region_export = c(.5, .5, .5),     p_cow_export = c(0.2, 0.2, 0.2),     n_cows_per_herd = c(rep(200, 3), rep(1000, 7), rep(3000, 11)),     movement_matrix = cbind(c(.6, .2, .2), c(.2, .6, .2), c(.2, .2, .6)),     time_test = 10000,     start_herd = 5,     start_count = 5))"},{"path":"https://mrc-ide.github.io/cowflu/articles/cowflu.html","id":"running-the-model","dir":"Articles","previous_headings":"","what":"Running the model","title":"Toy Example","text":"Start setting seed, number particles wish run Initialise dust system: Run model desired number time-steps, instance, 0 75: One model variables exported end s object part SEIR dynamics. want chop now. Now re-arrange output array: Dim 1 herd, note also export cumulative region totals end. Dim 2 number epi compartments: S, E, , R, outbreak recording. Dim 3 number particles run. Dim 4 time. Note, large models, may want (able) export every herd’s dynamic profile. Instead, can ask dust2 just return region totals like : Create , list region total indices. run model, allocate output array check outputs :","code":"set.seed(1) n_particles <- 1 sys <- dust2::dust_system_create(cowflu:::cows(), pars, n_particles = n_particles, dt = 0.25, seed = 42) dust2::dust_system_set_state_initial(sys) s <- dust2::dust_system_simulate(sys, 0:75) end_of_core_states <- (pars$n_herds + pars$n_regions)*5 s <- s[1:end_of_core_states,] s1 <- array(s, c(pars$n_herds + pars$n_regions, 5, n_particles, 76)) i <- seq.int(pars$n_herds + 1, length.out = pars$n_regions) i <- c(outer(i, (pars$n_herds + pars$n_regions) * (0:3), \"+\")) sys <- dust2::dust_system_create(cowflu:::cows(), pars, n_particles = n_particles, dt = 0.25, seed = 42) dust2::dust_system_set_state_initial(sys) s <- dust2::dust_system_simulate(sys, 0:75, i) s2 <- array(s, c(pars$n_regions, 4, n_particles, 76)) testthat::expect_equal(s1[22:24, 1:4, , , drop = FALSE], s2)"},{"path":"https://mrc-ide.github.io/cowflu/articles/fitting-parameters.html","id":"setting-model-parameters","dir":"Articles","previous_headings":"","what":"Setting model parameters","title":"Model Fitting with cowflu","text":"First, toy example vignette, set model parameters. time specific model. alpha, beta, gamma, sigma epidemiological parameters. asc_rate ascertainment rate scaling parameter fit. n_herds_per_region vector listing number herds region. p_region_export vector listing probability , day, herd within respective region export cattle another herd. yet inform herd go, whether export going happen. p_cow_export vector listing probability , given herd exporting cattle, probability cow herd included export. n_cows_per_herd vector listing exactly many cows initialised herd model. movement_matrix details probability region exported herd sent . Element (, j) probability export region sent region j. Thus, row sum 1. time_test time point (weeks) cattle start tested flu. point, herd exported one region another, number cows sampled exported cows. sampled cows Infected compartment, export cancelled. six movement variables explained detail section 2.4 Supplementary Material associated paper. start_herd herd infected cows seeded model initialisation. start_count number infected cows seeded herd start_herd model initialisation. likelihood_choice sets likelihood function use. default choice, main result presented paper, fits “survival function” - step function detailing point time first outbreak detected state. alternate option “incidence”, explored SI section 3.2.1.","code":"pars <- cowflu:::cowflu_inputs(   alpha = 0.05,   beta = 1.45,   gamma = 1.4,   sigma = 1.5,   asc_rate = 0.8,   dispersion = 1,   cowflu:::cowflu_fixed_inputs(     n_herds_per_region = cowflu:::usda_data$n_herds_per_region,     p_region_export = cowflu:::movement$p_region_export,     p_cow_export = cowflu:::movement$p_cow_export,     n_cows_per_herd = cowflu:::usda_data$n_cows_per_herd,     movement_matrix = cowflu:::movement$movement_matrix,     time_test = 19, #Day 136 - April 29th 2024     start_herd = 26940, #26804 is where Texas starts. #26940 is a median-sized Texas herd.     start_count = 5,     condition_on_export = TRUE,     likelihood_choice = \"survival\"))"},{"path":"https://mrc-ide.github.io/cowflu/articles/fitting-parameters.html","id":"set-priors","dir":"Articles","previous_headings":"","what":"Set Priors","title":"Model Fitting with cowflu","text":"Epidemiological model parameters fit data via Bayesian evidence synthesis approach. first set priors parameters.","code":"prior <- monty::monty_dsl({    alpha ~ Uniform(min = 0, max = 0.1)    beta ~ Uniform(min = 0.05, max = 3)    gamma ~ Uniform(min = 0.05, max = 2)     sigma ~ Uniform(min = 0.05, max = 2)     asc_rate ~ Beta(a = 1, b = 1)  })  ## Pack the priors pars_fixed <- pars[-(20:24)] prior_packer <- monty::monty_packer(c(\"alpha\", \"beta\", \"gamma\", \"sigma\", \"asc_rate\"), fixed = pars_fixed)  ## With this packer we can convert from a list of name-value pairs suitable for ## initialising a dust2 system into a vector of parameters suitable for use with monty: prior_packer$pack(pars) #> [1] 0.05 1.45 1.40 1.50 0.80"},{"path":"https://mrc-ide.github.io/cowflu/articles/fitting-parameters.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Model Fitting with cowflu","text":"load data fitting . match likelihood function chosen. case, step function “time first outbreak detection” per state.","code":"data_outbreaks <- cowflu:::process_data_outbreak(cowflu:::outbreaks_data$weekly_outbreaks_data)  data_week <- dust2::dust_filter_data(data_outbreaks, time = \"week\")"},{"path":"https://mrc-ide.github.io/cowflu/articles/fitting-parameters.html","id":"prepare-dust2-items","dir":"Articles","previous_headings":"","what":"Prepare dust2 items","title":"Model Fitting with cowflu","text":"build particle filter, likelihood, posterior distribution using dust2. can save trajectories particle fitting un-commenting save_trajectories argument. define number particles filter 2 simplicity. main results presented, used 320 particles. also set variance-covariance matrix parameter used exploring parameter space -chain. use diagonal matrix, .e. covariance parameters.","code":"## Build a particle filter filter <- dust2::dust_filter_create(cowflu:::cows(), 0, #0 is \"time_start\"                                     data_week, n_particles = 2, n_threads = 32, dt = 1) #> Warning: Reducing 'n_threads' from requested 32 to 2, to match the total number of #> particles  ## Build a likelihood likelihood <- dust2::dust_likelihood_monty(filter, prior_packer,                                            save_state = FALSE                                            #,save_trajectories = c(\"outbreak_region\", \"infected_herds_region\", \"probability_test_pass_region\")                                            )  ## We combine the prior and the likelihood to create a posterior: posterior <- prior + likelihood vcv_matrix <- diag(c(0.0015, #alpha                      0.06,   #beta                      0.05,   #gamma                      0.05,   #sigma                      0.02))  #asc_rate"},{"path":"https://mrc-ide.github.io/cowflu/articles/fitting-parameters.html","id":"launch-fits","dir":"Articles","previous_headings":"","what":"Launch fits","title":"Model Fitting with cowflu","text":"reset weighting particles average every 200 steps, shown sampler setup. simplicity’s sake, vignette runs 4 chains 20 samples . full model analysis ran 16 chains 40,000 samples. resulting fitting_samples item list 5 items. fittings_samples$pars samples posterior distribution, shall use following vignette titled “Plotting model results”.","code":"## Build sampler sampler <- monty::monty_sampler_random_walk(vcv_matrix,                                                rerun_every = 200,                                               rerun_random = TRUE)   ## Run the samples fitting_samples <- monty::monty_sample(posterior, sampler,                                         n_steps = 20,                                         n_chains = 4,                                        initial = prior_packer$pack(pars) )"},{"path":"https://mrc-ide.github.io/cowflu/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Rawson. Author, maintainer. Rich FitzJohn. Author. Imperial College Science, Technology Medicine. Copyright holder.","code":""},{"path":"https://mrc-ide.github.io/cowflu/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rawson T, FitzJohn R (2025). cowflu: Cows Flu. R package version 0.2.6https://mrc-ide.github.io/cowflu https://github.com/mrc-ide/cowflu, https://mrc-ide.github.io/cowflu https://github.com/mrc-ide/cowflu.","code":"@Manual{,   title = {cowflu: Cows With Flu},   author = {Thomas Rawson and Rich FitzJohn},   year = {2025},   note = {R package version 0.2.6https://mrc-ide.github.io/cowflu https://github.com/mrc-ide/cowflu},   url = {https://mrc-ide.github.io/cowflu https://github.com/mrc-ide/cowflu}, }"},{"path":[]},{"path":"https://mrc-ide.github.io/cowflu/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Cows With Flu","text":"install cowflu:","code":"remotes::install_github(\"mrc-ide/cowflu\", upgrade = FALSE)"},{"path":"https://mrc-ide.github.io/cowflu/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Cows With Flu","text":"need cpp11, decor, brio installed . Make changes model [inst/dust/cows.cpp] Run dust2::dust_package(\".\") Run tests devtools::test() (exist!) set command line, can make src/cows.cpp instead second step.","code":""},{"path":"https://mrc-ide.github.io/cowflu/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Cows With Flu","text":"MIT © Imperial College Science, Technology Medicine","code":""}]
